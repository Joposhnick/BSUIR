`include "../src/all_blocks.v"
`timescale 1ns/1ps
module all_blocks_testbench;

parameter ADDRESS_WIDTH = 5;
parameter DATA_WIDTH = 8;
parameter BUFFER_LENGTH = 5;
parameter DATA_DELAY = 3;

reg clk;
reg start;
reg [ADDRESS_WIDTH-1:0] address;
reg rom_nram;
wire [DATA_WIDTH-1:0] general_data_bus;

integer i;

all_blocks #(
    .ADDRESS_WIDTH(ADDRESS_WIDTH),
    .DATA_WIDTH(DATA_WIDTH),
    .DATA_DELAY(DATA_DELAY),
    .BUFFER_LENGTH(BUFFER_LENGTH)
) boje (
    .clk(clk),
    .address(address),
    .start(start),
    .general_data_bus(general_data_bus),
    .rom_nram(rom_nram)
);

always #5 clk = ~clk;

initial begin : main
    
    integer fd;
    fd = $fopen("all_blocks_contains.txt", "w");

    $dumpfile("all_blocks_testbench.vcd");
    $dumpvars;

    $fwrite(fd, "ROM initialization:\n");
    for(i = 0; i < 2**ADDRESS_WIDTH; i = i + 1) begin
        $fwrite(fd, "[%d]", boje.ROM_1.memory[i]);
        if((i + 1) % 8 == 0) begin
            $fwrite(fd, "\n");
        end
    end
    $fwrite(fd, "RAM initialization:\n");
    for(i = 0; i < 2**ADDRESS_WIDTH; i = i + 1) begin
        $fwrite(fd, "[%d]", boje.RAM_1.memory[i]);
        if((i + 1) % 8 == 0) begin
            $fwrite(fd, "\n");
        end
    end
    $fwrite(fd, "Buffer initialization:\n");
    for(i = 0; i < BUFFER_LENGTH; i = i + 1) begin
        $fwrite(fd, "[%d]", boje.buffer_1.shifter[i]);
        if((i + 1) % 8 == 0) begin
            $fwrite(fd, "\n");
        end
    end

    {clk, start, address, rom_nram} = 0;

    #30  
    start = 1;
    address = 6;
    rom_nram = 1;
    #5 start = 0;

    #10 
    address = 10;
    
    #140  

    $fwrite(fd, "\nRAM first time:\n");
    for(i = 0; i < 2**ADDRESS_WIDTH; i = i + 1) begin
        $fwrite(fd, "[%d]", boje.RAM_1.memory[i]);
        if((i + 1) % 8 == 0) begin
            $fwrite(fd, "\n");
        end
    end

    $fclose(fd);
    #20
    $stop;
    $finish;
end

// always @(posedge clk or negedge clk) begin
//     $display("Time:%3d, addres_count=%d, state=%d, rw_counter=%d", 
//     $time, boje.address_counter, boje.current_state, boje.read_write_counter);
// end

endmodule