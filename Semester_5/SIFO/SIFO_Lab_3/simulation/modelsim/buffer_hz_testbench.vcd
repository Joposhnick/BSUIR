$date
	Thu Oct 20 11:50:59 2022
$end
$version
	Questa Intel Starter FPGA Edition Version 2021.2
$end
$timescale
	1ps
$end

$scope module buffer_hz_testbench $end
$var parameter 32 ! DATA_WIDTH $end
$var parameter 32 " BUFFER_LENGTH $end
$var reg 1 # clk $end
$var reg 8 $ in_data [7:0] $end
$var wire 1 % out_data [7] $end
$var wire 1 & out_data [6] $end
$var wire 1 ' out_data [5] $end
$var wire 1 ( out_data [4] $end
$var wire 1 ) out_data [3] $end
$var wire 1 * out_data [2] $end
$var wire 1 + out_data [1] $end
$var wire 1 , out_data [0] $end
$var reg 1 - read_in $end
$var reg 1 . write_out $end
$var integer 32 / i $end

$scope begin main $end
$var integer 32 0 fd $end
$upscope $end

$scope module dut $end
$var parameter 32 1 DATA_WIDTH $end
$var parameter 32 2 BUFFER_LENGTH $end
$var wire 1 3 clk $end
$var wire 1 4 in_data [7] $end
$var wire 1 5 in_data [6] $end
$var wire 1 6 in_data [5] $end
$var wire 1 7 in_data [4] $end
$var wire 1 8 in_data [3] $end
$var wire 1 9 in_data [2] $end
$var wire 1 : in_data [1] $end
$var wire 1 ; in_data [0] $end
$var wire 1 % out_data [7] $end
$var wire 1 & out_data [6] $end
$var wire 1 ' out_data [5] $end
$var wire 1 ( out_data [4] $end
$var wire 1 ) out_data [3] $end
$var wire 1 * out_data [2] $end
$var wire 1 + out_data [1] $end
$var wire 1 , out_data [0] $end
$var wire 1 < read_in $end
$var wire 1 = write_out $end
$var wire 1 > temp_data [7] $end
$var wire 1 ? temp_data [6] $end
$var wire 1 @ temp_data [5] $end
$var wire 1 A temp_data [4] $end
$var wire 1 B temp_data [3] $end
$var wire 1 C temp_data [2] $end
$var wire 1 D temp_data [1] $end
$var wire 1 E temp_data [0] $end
$var integer 32 F i $end

$scope module wire_hz_1 $end
$var parameter 32 G DATA_WIDTH $end
$var wire 1 > in_data [7] $end
$var wire 1 ? in_data [6] $end
$var wire 1 @ in_data [5] $end
$var wire 1 A in_data [4] $end
$var wire 1 B in_data [3] $end
$var wire 1 C in_data [2] $end
$var wire 1 D in_data [1] $end
$var wire 1 E in_data [0] $end
$var wire 1 = out_is_active $end
$var wire 1 % out_data [7] $end
$var wire 1 & out_data [6] $end
$var wire 1 ' out_data [5] $end
$var wire 1 ( out_data [4] $end
$var wire 1 ) out_data [3] $end
$var wire 1 * out_data [2] $end
$var wire 1 + out_data [1] $end
$var wire 1 , out_data [0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0#
bz $
0-
0.
b1000 !
b101 "
b1000 1
b101 2
b1000 G
bx /
b100 F
b10000000000000000000000000000011 0
z,
z+
z*
z)
z(
z'
z&
z%
xE
xD
xC
xB
xA
x@
x?
x>
0=
0<
z;
z:
z9
z8
z7
z6
z5
z4
03
$end
#5000
1#
13
#10000
0#
03
#15000
1#
13
#20000
0#
1-
b0 /
1<
03
#25000
1#
13
b1 F
b10 F
b11 F
b100 F
b101 F
b0 $
b1 /
0;
0:
09
08
07
06
05
04
0E
0D
0C
0B
0A
0@
0?
0>
#30000
0#
03
#35000
1#
13
b1 F
b10 F
b11 F
b100 F
b101 F
b11 $
b10 /
1;
1:
#40000
0#
03
#45000
1#
13
b1 F
b10 F
b11 F
b100 F
b101 F
b110 $
b11 /
0;
19
#50000
0#
03
#55000
1#
13
b1 F
b10 F
b11 F
b100 F
b101 F
b1001 $
b100 /
1;
0:
09
18
#60000
0#
03
#65000
1#
13
b1 F
b10 F
b11 F
b100 F
b101 F
b1100 $
b101 /
0;
19
zE
zD
zC
zB
zA
z@
z?
z>
#70000
0#
03
#75000
1#
13
b1 F
b10 F
b11 F
b100 F
b101 F
bz $
0-
b0 /
b1 /
b10 /
b11 /
b100 /
b101 /
z;
z:
z9
z8
z7
z6
z5
z4
0<
0E
0D
0C
0B
0A
0@
0?
0>
#80000
0#
03
#85000
1#
13
#90000
0#
03
#95000
1#
13
1.
1=
0,
0+
0*
0)
0(
0'
0&
0%
#100000
0#
03
#105000
1#
13
b1 F
b10 F
b11 F
b100 F
b101 F
1E
1D
1,
1+
#110000
0#
03
#115000
1#
13
b1 F
b10 F
b11 F
b100 F
b101 F
0E
1C
0,
1*
#120000
0#
03
#125000
1#
13
b1 F
b10 F
b11 F
b100 F
b101 F
1E
0D
0C
1B
1,
0+
0*
1)
#130000
0#
03
#135000
1#
13
b1 F
b10 F
b11 F
b100 F
b101 F
0E
1C
0,
1*
#140000
0#
03
#145000
1#
13
b1 F
b10 F
b11 F
b100 F
b101 F
0C
0B
0*
0)
#150000
0#
03
#155000
1#
13
b1 F
b10 F
b11 F
b100 F
b101 F
#160000
0#
03
