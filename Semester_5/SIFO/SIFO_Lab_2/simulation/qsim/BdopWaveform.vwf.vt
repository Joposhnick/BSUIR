// Copyright (C) 2021  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/18/2022 21:15:42"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Block_dop
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block_dop_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK_50hz;
reg [7:0] M;
reg [7:0] N;
// wires                                               
wire Change;
wire CLK10T;
wire MbNIndicator;
wire [7:0] q;

// assign statements (if any)                          
Block_dop i1 (
// port map - connection between master ports and signals/registers   
	.Change(Change),
	.CLK10T(CLK10T),
	.CLK_50hz(CLK_50hz),
	.M(M),
	.MbNIndicator(MbNIndicator),
	.N(N),
	.q(q)
);
initial 
begin 
#4000000 $finish;
end 

// CLK_50hz
always
begin
	CLK_50hz = 1'b0;
	CLK_50hz = #10000 1'b1;
	#10000;
end 
// M[ 7 ]
initial
begin
	M[7] = 1'b0;
end 
// M[ 6 ]
initial
begin
	M[6] = 1'b0;
end 
// M[ 5 ]
initial
begin
	M[5] = 1'b0;
	M[5] = #2360000 1'b1;
	M[5] = #1020000 1'b0;
end 
// M[ 4 ]
initial
begin
	M[4] = 1'b0;
	M[4] = #2360000 1'b1;
	M[4] = #1020000 1'b0;
end 
// M[ 3 ]
initial
begin
	M[3] = 1'b0;
	M[3] = #80000 1'b1;
	M[3] = #2240000 1'b0;
end 
// M[ 2 ]
initial
begin
	M[2] = 1'b0;
end 
// M[ 1 ]
initial
begin
	M[1] = 1'b0;
end 
// M[ 0 ]
initial
begin
	M[0] = 1'b0;
end 
// N[ 7 ]
initial
begin
	N[7] = 1'b0;
end 
// N[ 6 ]
initial
begin
	N[6] = 1'b0;
end 
// N[ 5 ]
initial
begin
	N[5] = 1'b0;
end 
// N[ 4 ]
initial
begin
	N[4] = 1'b0;
end 
// N[ 3 ]
initial
begin
	N[3] = 1'b0;
	N[3] = #2460000 1'b1;
	N[3] = #820000 1'b0;
end 
// N[ 2 ]
initial
begin
	N[2] = 1'b0;
	N[2] = #90000 1'b1;
	N[2] = #850000 1'b0;
	N[2] = #560000 1'b1;
	N[2] = #700000 1'b0;
	N[2] = #260000 1'b1;
	N[2] = #820000 1'b0;
end 
// N[ 1 ]
initial
begin
	N[1] = 1'b0;
	N[1] = #940000 1'b1;
	N[1] = #1260000 1'b0;
end 
// N[ 0 ]
initial
begin
	N[0] = 1'b0;
	N[0] = #940000 1'b1;
	N[0] = #1260000 1'b0;
end 
endmodule

